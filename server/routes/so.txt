I am currently working on my first fullstack javascript app. I use express.js and mongodb with mongoose.
I want to make use of the class syntax on the server side. Mainly because I like this 
style from languages like Java, where you could write something like this:

if(billing.isPaid()){
    // do something
}

I think it makes the code really well readable.

So, lets say I have a project structure like this:

| - routes
|   | - billing.js
|   | - client.js
| - models
|   | - billing.js
|   | - client.js


Now I want to get all billings from the database and perform some logic
on the data. I want to keep my routes files simple and small. Something like this.

// localhost/api/billings/due
router.get('/due', async(req, res) => {
    try {

        const billings = await Billing.find()
        const billingsDue = getBillingsDue(billings)
        res.json( billingsDue )

    } catch (error) {
        res.status(500).json({ message: error.message })
    }
})

My question now is: How can I call a method like this billing.isDue(). I imagine that I would need to create a new object
for every array item (see comment in following code example). But that seems kind of counterintuitive to do.

function getBillingsDue(_billings){

  const billings = _billings
  const billingsDue = {
          billings = [],
          total = 0,
          taxes = 0,
          totalWithTaxes
        }

  billings.forEach( billing => {
    // billing would need to be an object created by the class Billing
    if(billing.isDue()){
      billingsDue.billings.push(billing)
    } 
  })

}

How do I put all of this together? My thought was to extend my project file structure to something like this

| - routes
|   | - billing.js
|   | - client.js
| - models
|   | - billing.js
|   | - client.js
| - services
|   | - billing.js

And services/billing.js would look like this:

class Billing {

    constructor(nr, title, date, items, status) {
        this.nr = nr;
        this.title = title;
        this.date = date;
        this.items = items;
        this.status = status;
    }


    isDue() {
        const billing = this;
        const today = new Date();
        const paymentTarget = 14

        if (!billing.status.isPaid() && billing.date + zahlungsZiel >= today) {
            return true
        }
    }

    getBillingsDue(_billings){
        // ...
    }


}

module.exports = Billing

